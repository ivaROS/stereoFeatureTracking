#!/usr/bin/env python
PACKAGE = "sparse_stereo"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("visualize_enabled", bool_t, 0, "Enable visualization", True)
gen.add("optimize_pose_enabled", bool_t, 0, "Enable optimize pose", False)

#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)

# detector_enum = gen.enum([ gen.const("AgastFeatureDetector", int_t, 0, "AgastFeatureDetector"),
# 			   gen.const("FastFeatureDetector", int_t, 1, "FastFeatureDetector"),
#                            gen.const("GFTTDetector", int_t, 2, "GFTTDetector"),
#                            gen.const("MSER", int_t, 3, "MSER"),
# 			   gen.const("ORB_detector", int_t, 4, "ORB"),
# 			   gen.const("SIFT_detector", int_t, 5, "SIFT"),
# 			   gen.const("StarFeatureDetector", int_t, 6, "StarFeatureDetector"),
# 			   gen.const("SURF_detector", int_t, 7, "SURF"),
# 			   gen.const("BRISK_detector", int_t, 8, "BRISK")],
#                      	   "An enum to set detector algorithm")
# gen.add("Detector", int_t, 0, "An algorithm for detector", 4, 0, 8, edit_method=detector_enum)
# 
# descriptor_enum = gen.enum([ gen.const("BriefDescriptorExtractor", int_t, 3, "BriefDescriptorExtractor"),
#                              gen.const("ORB_descriptor", int_t, 4, "ORB"),
#                              gen.const("SIFT_descriptor", int_t, 5, "SIFT"),
# 			     gen.const("FREAK_descriptor", int_t, 6, "FREAK"),
#                              gen.const("SURF_descriptor", int_t, 7, "SURF"),
# 			     gen.const("BRISK_descriptor", int_t, 8, "BRISK")],
#                      	     "An enum to set descriptor algorithm")
# gen.add("Descriptor", int_t, 0, "An algorithm for descriptor", 4, 3, 8, edit_method=descriptor_enum)
# 
# gen.add("orb_num", int_t, 0, "The number of orb descriptor",    3000, 500,   5000)
# 
# gen.add("parallelism",   bool_t,   0, "Enable parallelism using OpenMP",  True)
# gen.add("enableMask",   bool_t,   0, "Using mask to do feature matching",  True)
# gen.add("crosscheck",   bool_t,   0, "Enable crosscheck",  True)
# gen.add("Both",   bool_t,   0, "Use both method to compare the output size",  False)
# gen.add("repeated_remove",   bool_t,   0, "Remove the repeated",  False)
# gen.add("knn_enabled",   bool_t,   0, "Use knn match for matching algorithm without mask",  False)
# gen.add("useBFMatcher",   bool_t,   0, "Enable brute force",  True)
# 
# gen.add("robotRange", double_t, 0, "The size of the robot",    0.3, 0, 10)
# 
# gen.add("epi_range", int_t, 0, "The range for y coordinate to assure epipolar rule",    1, 0,   70)
# gen.add("max_disparity_prop", double_t, 0, "Max disparity proportion",   0.07, 0.03,   0.15)
# gen.add("max_distance", double_t, 0, "Allowed maximum hamming distance",    50, 5,   500)
# gen.add("k", int_t, 0, "k nearest neighbors for feature matching when knnMatch enabled",    2, 1,   50)

exit(gen.generate(PACKAGE, PACKAGE, "SparseStereoTester"))
